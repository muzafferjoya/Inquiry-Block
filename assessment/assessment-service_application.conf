akka {
  default-dispatcher {
    # This will be used if you have set "executor = "fork-join-executor""
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 8

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 32.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 64

      # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
      # like peeking mode which "pop".
      task-peeking-mode = "FIFO"
    }
  }
  actors-dispatcher {
    type = "Dispatcher"
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 8
      parallelism-factor = 32.0
      parallelism-max = 64
    }
    # Throughput for default Dispatcher, set to 1 for as fair as possible
    throughput = 1
  }
  actor {
    deployment {
      /healthActor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 5
          dispatcher = actors-dispatcher
        }
      /itemSetActor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 2
          dispatcher = actors-dispatcher
        }
      /questionActor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 5
          dispatcher = actors-dispatcher
        }
      /questionSetActor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 5
          dispatcher = actors-dispatcher
        }
      /questionV5Actor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 5
          dispatcher = actors-dispatcher
        }
      /questionSetV5Actor
        {
          router = smallest-mailbox-pool
          nr-of-instances = 5
          dispatcher = actors-dispatcher
        }
    }
  }
}

play.http.secret.key= a-long-secret-to-calm-the-rage-of-the-entropy-gods

play.modules {
  enabled += modules.AssessmentModule
}

play.i18n {
  # The application languages
  langs = [ "en" ]

}

## Play HTTP settings
# ~~~~~
play.http {
  session {
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}

play.server.http.idleTimeout = 60s
play.http.parser.maxDiskBuffer = 10MB
parsers.anyContent.maxLength = 10MB

## Netty Provider
# https://www.playframework.com/documentation/latest/SettingsNetty
# ~~~~~
play.server.netty {
  # Whether the Netty wire should be logged
  log.wire = true

  # If you run Play on Linux, you can use Netty's native socket transport
  # for higher performance with less garbage.
  transport = "native"
}

play.ws {
  ssl {
  }
}

play.cache {
}

play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled = [filters.AccessLogFilter]

  cors {
   
  }

  
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

play.http.parser.maxMemoryBuffer = 50MB
akka.http.parsing.max-content-length = 50MB
schema.base_path="../../schemas/"

# Cassandra Configuration
cassandra.lp.connection="cassandra-db.knowlg-db.svc.cluster.local:9042"
content.keyspace = "content_store"

# Redis Configuration
redis.host="redis-db.knowlg-db.svc.cluster.local"
redis.port=6379
redis.maxConnections=128

# Graph Configuration
graph.dir=/data/testingGraphDB
akka.request_timeout=30
environment.id=10000000
graph.ids=["domain"]
graph.passport.key.base=31b6fd1c4d64e745c867e61a45edc34a
route.domain="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.write.domain="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.read.domain="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.comment.domain="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.all="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.write.all="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.read.all="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"
route.bolt.comment.all="bolt://neo4j-db.knowlg-db.svc.cluster.local:7687"

shard.id=1
platform.auth.check.enabled=false
platform.cache.ttl=3600000

#Top N Config for Search Telemetry
telemetry_env=dev

installation.id=ekstep


languageCode {
  assamese : "as"
  bengali : "bn"
  english : "en"
  gujarati : "gu"
  hindi : "hi"
  kannada : "ka"
  marathi : "mr"
  odia : "or"
  tamil : "ta"
  telugu : "te"
}

kafka {
  urls : "kafka.knowlg-db.svc.cluster.local:9092"
  topic.send.enable : true
  topics.instruction : "sunbirddev.assessment.publish.request"
}

objectcategorydefinition.keyspace="local_category_store"
question {
  keyspace = "local_question_store"
  list.limit=20
}
questionset.keyspace="local_hierarchy_store"

cassandra {
  lp {
    connection: "cassandra-db.knowlg-db.svc.cluster.local:9042"
  }
  lpa {
    connection: "cassandra-db.knowlg-db.svc.cluster.local:9042"
  }
}
neo4j_objecttypes_enabled=["Question"]

import {
  request_size_limit = 200
  output_topic_name = "local.auto.creation.job.request"
  required_props {
    question = ["name", "code", "mimeType", "framework", "channel"]
    questionset = ["name", "code", "mimeType", "framework", "channel"]
  }
  remove_props {
    question = []
    questionset = []
  }
}

root_node_visibility=["Default","Private"]
assessment.copy.origin_data=["name", "author", "license", "organisation"]
assessment.copy.props_to_remove=["downloadUrl", "artifactUrl", "variants",
  "createdOn", "collections", "children", "lastUpdatedOn", "SYS_INTERNAL_LAST_UPDATED_ON",
  "versionKey", "s3Key", "status", "pkgVersion", "toc_url", "mimeTypesCount",
  "contentTypesCount", "leafNodesCount", "childNodes", "prevState", "lastPublishedOn",
  "flagReasons", "compatibilityLevel", "size", "publishChecklist", "publishComment",
  "LastPublishedBy", "rejectReasons", "rejectComment", "gradeLevel", "subject",
  "medium", "board", "topic", "purpose", "subtopic", "contentCredits",
  "owner", "collaborators", "creators", "contributors", "badgeAssertions", "dialcodes",
  "concepts", "keywords", "reservedDialcodes", "dialcodeRequired", "leafNodes", "sYS_INTERNAL_LAST_UPDATED_ON", "prevStatus", "lastPublishedBy", "streamingUrl"]

v5_supported_qumlVersions=[1.1]
v5_default_qumlVersion=1.1
